name: Validate Jargon Artefacts

on:
  pull_request:
    branches:
      - 'data-models-staging'
      - 'cd/data-models-snapshots'
    paths:
      - 'data-models/**'
  workflow_dispatch:

jobs:
  validate-jargon-artefacts:
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}  # This checks out the PR branch
      - name: Read file and set env variable
        run: |
          echo "CLIENT_PAYLOAD<<EOF" >> $GITHUB_ENV
          cat ./client_payload.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run Validate Jargon Artefacts
        if: ${{ env.CLIENT_PAYLOAD }}
        uses: ./.github/actions/validate-jargon-artefacts
        with:
          jargon-webhook-payload: ${{ env.CLIENT_PAYLOAD }}
      
      - uses: actions/create-github-app-token@v2
        if: ${{ env.CLIENT_PAYLOAD }}
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      
      #https://github.com/actions/create-github-app-token?tab=readme-ov-file#configure-git-cli-for-an-apps-bot-user
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
      - name: commit pdf
        run: |
          rm ./data-models/client_payload.json
          git add ./data-models
          git commit -m "chore: delete client_payload.json" || echo -e "nothing to commit" 
          git push origin ${{ github.head_ref }}
      